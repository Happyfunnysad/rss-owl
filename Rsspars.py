import warnings
import feedparser
import sqlite3
from datetime import datetime, timezone, timedelta
import time
from typing import Dict, Any
import html
import requests
from urllib.parse import quote
import json
import os

warnings.filterwarnings('ignore', category=DeprecationWarning)

class TelegramRSSParser:
    def __init__(self, db_name: str = "tg-posts.db", config_file: str = "config.json"):
        self.db_name = db_name
        self.config = self.load_config(config_file)
        self.channels = self.config.get('channels', [])
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
        }
        self.rss_sources = [
            "https://tg.i-c-a.su/rss/{channel}",
            "https://rsshub.app/telegram/channel/{channel}",
            "https://telegram.meta.ua/rss/{channel}",
            "https://tg.i-c-a.su/rss/{channel}?format=html",

        ]
        self.init_db()

    def load_config(self, config_file: str) -> dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
                
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥–µ
            if 'check_intervals' not in config:
                config['check_intervals'] = {
                    'initial': 30,
                    'min': 15,
                    'max': 60,
                    'increment': 5
                }
            return config
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {
                'channels': [],
                'check_intervals': {
                    'initial': 30,
                    'min': 15,
                    'max': 60,
                    'increment': 5
                }
            }

    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTC"""
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS posts (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    post_id TEXT UNIQUE,
                    content TEXT,
                    published_date TIMESTAMP,
                    source_url TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_post_id ON posts(post_id)')
            conn.commit()

    def clean_text(self, text: str) -> str:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–∏—Å—Ç–∫–∏
            cleanup_config = self.config.get('text_cleanup', {})
            remove_phrases = cleanup_config.get('remove_phrases', [])
            remove_patterns = cleanup_config.get('remove_patterns', [])

            # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            text = text.replace('<br>', '\n')
            text = text.replace('<br/>', '\n')
            text = text.replace('<p>', '\n')
            text = text.replace('</p>', '\n')
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ forwarded —Å–æ–æ–±—â–µ–Ω–∏–π
            if 'Forwarded From' in text:
                text = text.split('</b>')[-1].strip()
            
            # –£–¥–∞–ª—è–µ–º div –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            if '<div class="tgme_widget_message_text' in text:
                text = text.split('dir="auto">')[-1]
                text = text.split('</div>')[0]
                
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è HTML —Ç–µ–≥–∏
            import re
            text = re.sub('<[^<]+?>', '', text)
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
            for phrase in remove_phrases:
                text = text.replace(phrase, '')
            
            # –£–¥–∞–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º
            for pattern in remove_patterns:
                text = re.sub(pattern, '', text)
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º HTML —Å—É—â–Ω–æ—Å—Ç–∏
            text = html.unescape(text)
            
            # –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            lines = []
            for line in text.splitlines():
                line = line.strip()
                if line and not any(phrase in line for phrase in remove_phrases):
                    lines.append(line)
            
            text = '\n'.join(lines)
            
            # –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
            text = re.sub(r'\n\s*\n', '\n\n', text)
            
            return text.strip()
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
            return text

    def get_feed_data(self, channel_name: str) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö RSS –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        all_entries = []
        successful_source = None

        print(f"\n{'='*50}")
        print(f"–ö–∞–Ω–∞–ª: {channel_name}")
        print(f"{'='*50}")

        for source_url in self.rss_sources:
            try:
                url = source_url.format(channel=channel_name)
                print(f"üì° {url.split('/')[2]}: ", end='')
                
                response = requests.get(
                    url, 
                    headers=self.headers, 
                    timeout=10,
                    verify=True
                )
                
                if response.status_code == 200:
                    feed = feedparser.parse(response.text)
                    
                    if hasattr(feed, 'entries') and len(feed.entries) > 0:
                        all_entries.extend(feed.entries)
                        successful_source = url
                        print(f"‚úÖ {len(feed.entries)} –∑–∞–ø–∏—Å–µ–π")
                    else:
                        print("‚ùå –ü—É—Å—Ç–æ–π —Ñ–∏–¥")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}")
                    
            except Exception as e:
                print(f"‚ùå {str(e)[:50]}...")
                continue

        if all_entries:
            unique_entries = {}
            for entry in all_entries:
                post_id = entry.link.split('/')[-1]
                if post_id not in unique_entries:
                    unique_entries[post_id] = entry

            print(f"\nüìä –ò—Ç–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(unique_entries)}")
            feed = type('obj', (object,), {'entries': list(unique_entries.values())})
            return feed

        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return None

    def save_post(self, post_data: Dict[str, Any]) -> bool:
        try:
            with sqlite3.connect(self.db_name) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT OR IGNORE INTO posts 
                    (post_id, content, published_date, source_url)
                    VALUES (?, ?, ?, ?)
                ''', (
                    post_data['post_id'],
                    post_data['content'],
                    post_data['published_date'],
                    post_data['source_url']
                ))
                if cursor.rowcount > 0:
                    self.save_to_txt(post_data)
                    return True
                return False
        except sqlite3.Error as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")
            return False

    def save_to_txt(self, post_data: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π"""
        try:
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
            entries = []
            if os.path.exists('tg-posts.txt'):
                with open('tg-posts.txt', 'r', encoding='utf-8') as f:
                    content = f.read()
                    raw_entries = content.split('\n\n')
                    for entry in raw_entries:
                        if entry.strip() and not entry.startswith('='): 
                            entries.append(entry.strip())

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            new_entry = f"[{post_data['published_date']}] {post_data['content']}\n–ò—Å—Ç–æ—á–Ω–∏–∫: {post_data['source_url']}"
            entries.append(new_entry)

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ
            def extract_date(entry):
                try:
                    date_str = entry[1:entry.find(']')]
                    # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ –¥–∞—Ç—ã –∫ naive datetime –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    dt = datetime.fromisoformat(date_str)
                    if dt.tzinfo:
                        dt = dt.replace(tzinfo=None)
                    return dt
                except:
                    return datetime.min
            
            entries.sort(key=extract_date, reverse=True)

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            with open('tg-posts.txt', 'w', encoding='utf-8') as f:
                f.write('\n\n'.join(entries))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
            self.update_txt_summary()
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ —Ñ–∞–π–ª: {e}")

    def parse_date(self, date_str: str) -> datetime:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
        try:
            # –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞—Ç
            date_formats = [
                '%a, %d %b %Y %H:%M:%S %Z',     # Thu, 21 Nov 2024 09:02:50 GMT
                '%a, %d %b %Y %H:%M:%S %z',     # Thu, 21 Nov 2024 09:02:50 +0000
                '%Y-%m-%dT%H:%M:%S.%fZ',        # 2024-11-21T09:02:50.000Z
                '%Y-%m-%dT%H:%M:%SZ',           # 2024-11-21T09:02:50Z
                '%Y-%m-%d %H:%M:%S',            # 2024-11-21 09:02:50
            ]

            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã
            date_str = date_str.strip()
            
            # –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–æ—Ä–º–∞—Ç
            for date_format in date_formats:
                try:
                    # –î–ª—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–æ–π
                    if '%Z' in date_format:
                        # –ó–∞–º–µ–Ω—è–µ–º GMT –Ω–∞ +0000 –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
                        if 'GMT' in date_str:
                            date_str = date_str.replace('GMT', '+0000')
                        parsed_date = datetime.strptime(date_str, date_format)
                        return parsed_date.replace(tzinfo=timezone.utc)
                    else:
                        parsed_date = datetime.strptime(date_str, date_format)
                        # –î–æ–±–∞–≤–ª—è–µ–º UTC –¥–ª—è –¥–∞—Ç –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
                        if not parsed_date.tzinfo:
                            parsed_date = parsed_date.replace(tzinfo=timezone.utc)
                        return parsed_date
                except ValueError:
                    continue

            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            print(f"üìÖ –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É '{date_str}', –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è")
            return datetime.now(timezone.utc)

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã '{date_str}': {e}")
            return datetime.now(timezone.utc)

    def check_duplicate(self, post_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ –ë–î"""
        try:
            with sqlite3.connect(self.db_name) as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT id FROM posts WHERE post_id = ?', (post_id,))
                return cursor.fetchone() is not None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–∞: {e}")
            return False

    def parse_feed(self, feed: dict, last_check_time: datetime = None) -> int:
        try:
            new_posts = 0
            existing_posts = 0
            
            for entry in feed.entries:
                try:
                    post_id = entry.link.split('/')[-1]
                    
                    if self.check_duplicate(post_id):
                        existing_posts += 1
                        continue
                    
                    content = self.clean_text(entry.description)
                    published_date = self.parse_date(entry.published)
                    
                    if last_check_time and published_date <= last_check_time:
                        continue
                    
                    post_data = {
                        'post_id': post_id,
                        'content': content,
                        'published_date': published_date,
                        'source_url': entry.link
                    }
                    
                    if self.save_post(post_data):
                        new_posts += 1
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞ {post_id}: {e}")
                    continue
            
            return new_posts
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return 0

    def get_latest_posts(self, limit: int = 10) -> list:
        with sqlite3.connect(self.db_name) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT post_id, content, published_date
                FROM posts
                ORDER BY published_date DESC
                LIMIT ?
            ''', (limit,))
            return cursor.fetchall()

    def get_db_stats(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_name) as conn:
                cursor = conn.cursor()
                
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
                cursor.execute('SELECT COUNT(*) FROM posts')
                total_posts = cursor.fetchone()[0]
                
                # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã
                cursor.execute('''
                    SELECT post_id, published_date, content 
                    FROM posts 
                    ORDER BY published_date DESC 
                    LIMIT 5
                ''')
                latest_posts = cursor.fetchall()
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞—Ç–∞–º
                cursor.execute('''
                    SELECT DATE(published_date) as date, COUNT(*) as count 
                    FROM posts 
                    GROUP BY DATE(published_date) 
                    ORDER BY date DESC 
                    LIMIT 5
                ''')
                posts_by_date = cursor.fetchall()
                
                return {
                    'total_posts': total_posts,
                    'latest_posts': latest_posts,
                    'posts_by_date': posts_by_date
                }
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return None

    def print_db_stats(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        stats = self.get_db_stats()
        if not stats:
            return
        
        print("\n=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===")
        print(f"–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {stats['total_posts']}")
        
        print("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã:")
        for post in stats['latest_posts']:
            post_id, date, content = post
            print(f"ID: {post_id}")
            print(f"–î–∞—Ç–∞: {date}")
            print(f"–ö–æ–Ω—Ç–µ–Ω—Ç: {content[:100]}...")
            print("-" * 50)
        
        print("\n–ü–æ—Å—Ç—ã –ø–æ –¥–∞—Ç–∞–º:")
        for date, count in stats['posts_by_date']:
            print(f"{date}: {count} –ø–æ—Å—Ç–æ–≤")

    def get_posts_stats(self) -> dict:
        """–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ—Å—Ç–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏"""
        try:
            with sqlite3.connect(self.db_name) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT 
                        DATE(published_date) as date,
                        COUNT(*) as count
                    FROM posts
                    WHERE published_date >= DATE('now', '-7 days')
                    GROUP BY DATE(published_date)
                    ORDER BY date DESC
                    LIMIT 7
                ''')
                return dict(cursor.fetchall())
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

    def print_cycle_stats(self, new_posts: int):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        if new_posts > 0:
            print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
            print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤: {new_posts}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
            stats = self.get_posts_stats()
            if stats:
                print("\nüìÖ –ü–æ—Å—Ç—ã –ø–æ –¥–∞—Ç–∞–º:")
                for date, count in stats.items():
                    print(f"   {date}: {count:3d} –ø–æ—Å—Ç–æ–≤")
        else:
            print("\nüí§ –ù–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

    def generate_summary(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ –≤—Å–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º"""
        try:
            with sqlite3.connect(self.db_name) as conn:
                cursor = conn.cursor()
                
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
                cursor.execute('SELECT COUNT(*) FROM posts')
                total_posts = cursor.fetchone()[0]
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
                cursor.execute('''
                    WITH channel_data AS (
                        SELECT 
                            CASE 
                                WHEN source_url LIKE '%t.me/%' 
                                THEN substr(source_url, instr(source_url, 't.me/') + 5)
                                ELSE source_url
                            END as full_channel
                        FROM posts
                    )
                    SELECT 
                        substr(full_channel, 1, instr(full_channel || '/', '/') - 1) as channel,
                        COUNT(*) as count
                    FROM channel_data
                    GROUP BY substr(full_channel, 1, instr(full_channel || '/', '/') - 1)
                    ORDER BY count DESC
                ''')
                channel_stats = cursor.fetchall()
                
                # –§–æ—Ä–º–∏—Ä—É–º —Ç–µ–∫—Å—Ç —Å–≤–æ–¥–∫–∏
                summary = [
                    "\n\n" + "="*50,
                    "–°–í–û–î–ö–ê –ü–û –°–û–ë–†–ê–ù–ù–´–ú –î–ê–ù–ù–´–ú",
                    "="*50,
                    f"\n–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {total_posts}",
                    "\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º:"
                ]
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–Ω–∞–ª–∞–º
                for channel, count in channel_stats:
                    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "–ø–æ—Å—Ç"
                    posts_word = "–ø–æ—Å—Ç–æ–≤"
                    if count % 10 == 1 and count % 100 != 11:
                        posts_word = "–ø–æ—Å—Ç"
                    elif count % 10 in [2, 3, 4] and count % 100 not in [12, 13, 14]:
                        posts_word = "–ø–æ—Å—Ç–∞"
                    
                    summary.append(f"- {channel}: {count} {posts_word}")
                
                summary.extend(["\n" + "="*50])
                return "\n".join(summary)
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏: {e}")
            return ""

    def update_txt_summary(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists('tg-posts.txt'):
                with open('tg-posts.txt', 'w', encoding='utf-8') as f:
                    f.write("")
                    return

            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            with open('tg-posts.txt', 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç—ã, —É–¥–∞–ª—è—è –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            posts = []
            for entry in content.split('\n\n'):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                if any(skip in entry for skip in [
                    "–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –ø–æ—Å—Ç–æ–≤:",
                    "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º:",
                    "–°–í–û–î–ö–ê –ü–û –°–û–ë–†–ê–ù–ù–´–ú –î–ê–ù–ù–´–ú–ò",
                    "="*10
                ]):
                    continue
                if entry.strip():
                    posts.append(entry.strip())
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–≤–æ–¥–∫—É
            summary = self.generate_summary()
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ —Å–≤–æ–¥–∫–æ–π
            with open('tg-posts.txt', 'w', encoding='utf-8') as f:
                if posts:
                    f.write('\n\n'.join(posts) + summary)
                else:
                    f.write(summary)
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–≤–æ–¥–∫–∏: {e}")

def main():
    parser = TelegramRSSParser()
    intervals = parser.config.get('check_intervals', {})
    check_interval = intervals.get('initial', 30)
    last_check_times = {channel: None for channel in parser.channels}
    
    while True:
        try:
            current_time = datetime.now(timezone.utc)
            print(f"\nüïí –ü—Ä–æ–≤–µ—Ä–∫–∞: {current_time.strftime('%Y-%m-%d %H:%M:%S UTC')}")
            
            total_new_posts = 0
            for channel in parser.channels:
                feed = parser.get_feed_data(channel)
                if feed:
                    new_posts = parser.parse_feed(feed, last_check_times[channel])
                    if new_posts > 0:
                        last_check_times[channel] = current_time
                        total_new_posts += new_posts
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ü–∏–∫–ª–∞
            parser.print_cycle_stats(total_new_posts)
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
            if total_new_posts > 0:
                check_interval = intervals.get('min', 15)
            else:
                check_interval = min(
                    check_interval + intervals.get('increment', 5),
                    intervals.get('max', 60)
                )
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫: {e}")
            check_interval = intervals.get('max', 60)
        
        print(f"\n‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {check_interval} —Å–µ–∫...")
        time.sleep(check_interval)

if __name__ == "__main__":
    main()

#"alarmukraine",